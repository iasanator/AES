import java.io.File;
import java.util.Scanner;

public class Main {

    public static final short[] sbox =
        {0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
         0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
         0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
         0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
         0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
         0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
         0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
         0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
         0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
         0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
         0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
         0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
         0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
         0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
         0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
         0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16};

    public static final short[][] mult = {
        {0x00,0x00},{0x02,0x03},{0x04,0x06},{0x06,0x05},{0x08,0x0c},{0x0a,0x0f},{0x0c,0x0a},{0x0e,0x09},
        {0x10,0x18},{0x12,0x1b},{0x14,0x1e},{0x16,0x1d},{0x18,0x14},{0x1a,0x17},{0x1c,0x12},{0x1e,0x11},
        {0x20,0x30},{0x22,0x33},{0x24,0x36},{0x26,0x35},{0x28,0x3c},{0x2a,0x3f},{0x2c,0x3a},{0x2e,0x39},
        {0x30,0x28},{0x32,0x2b},{0x34,0x2e},{0x36,0x2d},{0x38,0x24},{0x3a,0x27},{0x3c,0x22},{0x3e,0x21},
        {0x40,0x60},{0x42,0x63},{0x44,0x66},{0x46,0x65},{0x48,0x6c},{0x4a,0x6f},{0x4c,0x6a},{0x4e,0x69},
        {0x50,0x78},{0x52,0x7b},{0x54,0x7e},{0x56,0x7d},{0x58,0x74},{0x5a,0x77},{0x5c,0x72},{0x5e,0x71},
        {0x60,0x50},{0x62,0x53},{0x64,0x56},{0x66,0x55},{0x68,0x5c},{0x6a,0x5f},{0x6c,0x5a},{0x6e,0x59},
        {0x70,0x48},{0x72,0x4b},{0x74,0x4e},{0x76,0x4d},{0x78,0x44},{0x7a,0x47},{0x7c,0x42},{0x7e,0x41},
        {0x80,0xc0},{0x82,0xc3},{0x84,0xc6},{0x86,0xc5},{0x88,0xcc},{0x8a,0xcf},{0x8c,0xca},{0x8e,0xc9},
        {0x90,0xd8},{0x92,0xdb},{0x94,0xde},{0x96,0xdd},{0x98,0xd4},{0x9a,0xd7},{0x9c,0xd2},{0x9e,0xd1},
        {0xa0,0xf0},{0xa2,0xf3},{0xa4,0xf6},{0xa6,0xf5},{0xa8,0xfc},{0xaa,0xff},{0xac,0xfa},{0xae,0xf9},
        {0xb0,0xe8},{0xb2,0xeb},{0xb4,0xee},{0xb6,0xed},{0xb8,0xe4},{0xba,0xe7},{0xbc,0xe2},{0xbe,0xe1},
        {0xc0,0xa0},{0xc2,0xa3},{0xc4,0xa6},{0xc6,0xa5},{0xc8,0xac},{0xca,0xaf},{0xcc,0xaa},{0xce,0xa9},
        {0xd0,0xb8},{0xd2,0xbb},{0xd4,0xbe},{0xd6,0xbd},{0xd8,0xb4},{0xda,0xb7},{0xdc,0xb2},{0xde,0xb1},
        {0xe0,0x90},{0xe2,0x93},{0xe4,0x96},{0xe6,0x95},{0xe8,0x9c},{0xea,0x9f},{0xec,0x9a},{0xee,0x99},
        {0xf0,0x88},{0xf2,0x8b},{0xf4,0x8e},{0xf6,0x8d},{0xf8,0x84},{0xfa,0x87},{0xfc,0x82},{0xfe,0x81},
        {0x1b,0x9b},{0x19,0x98},{0x1f,0x9d},{0x1d,0x9e},{0x13,0x97},{0x11,0x94},{0x17,0x91},{0x15,0x92},
        {0x0b,0x83},{0x09,0x80},{0x0f,0x85},{0x0d,0x86},{0x03,0x8f},{0x01,0x8c},{0x07,0x89},{0x05,0x8a},
        {0x3b,0xab},{0x39,0xa8},{0x3f,0xad},{0x3d,0xae},{0x33,0xa7},{0x31,0xa4},{0x37,0xa1},{0x35,0xa2},
        {0x2b,0xb3},{0x29,0xb0},{0x2f,0xb5},{0x2d,0xb6},{0x23,0xbf},{0x21,0xbc},{0x27,0xb9},{0x25,0xba},
        {0x5b,0xfb},{0x59,0xf8},{0x5f,0xfd},{0x5d,0xfe},{0x53,0xf7},{0x51,0xf4},{0x57,0xf1},{0x55,0xf2},
        {0x4b,0xe3},{0x49,0xe0},{0x4f,0xe5},{0x4d,0xe6},{0x43,0xef},{0x41,0xec},{0x47,0xe9},{0x45,0xea},
        {0x7b,0xcb},{0x79,0xc8},{0x7f,0xcd},{0x7d,0xce},{0x73,0xc7},{0x71,0xc4},{0x77,0xc1},{0x75,0xc2},
        {0x6b,0xd3},{0x69,0xd0},{0x6f,0xd5},{0x6d,0xd6},{0x63,0xdf},{0x61,0xdc},{0x67,0xd9},{0x65,0xda},
        {0x9b,0x5b},{0x99,0x58},{0x9f,0x5d},{0x9d,0x5e},{0x93,0x57},{0x91,0x54},{0x97,0x51},{0x95,0x52},
        {0x8b,0x43},{0x89,0x40},{0x8f,0x45},{0x8d,0x46},{0x83,0x4f},{0x81,0x4c},{0x87,0x49},{0x85,0x4a},
        {0xbb,0x6b},{0xb9,0x68},{0xbf,0x6d},{0xbd,0x6e},{0xb3,0x67},{0xb1,0x64},{0xb7,0x61},{0xb5,0x62},
        {0xab,0x73},{0xa9,0x70},{0xaf,0x75},{0xad,0x76},{0xa3,0x7f},{0xa1,0x7c},{0xa7,0x79},{0xa5,0x7a},
        {0xdb,0x3b},{0xd9,0x38},{0xdf,0x3d},{0xdd,0x3e},{0xd3,0x37},{0xd1,0x34},{0xd7,0x31},{0xd5,0x32},
        {0xcb,0x23},{0xc9,0x20},{0xcf,0x25},{0xcd,0x26},{0xc3,0x2f},{0xc1,0x2c},{0xc7,0x29},{0xc5,0x2a},
        {0xfb,0x0b},{0xf9,0x08},{0xff,0x0d},{0xfd,0x0e},{0xf3,0x07},{0xf1,0x04},{0xf7,0x01},{0xf5,0x02},
        {0xeb,0x13},{0xe9,0x10},{0xef,0x15},{0xed,0x16},{0xe3,0x1f},{0xe1,0x1c},{0xe7,0x19},{0xe5,0x1a}};


    public static short[] rCon = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    public static short[][] keyComplete = new short[4][44];

    public static int rounds;
    public static int iterations;
    public static short[][] key;
    public static short[][] block;


    public static void main(String args[]){

        File file = new File("src/input.txt");

        try {
            Scanner sc = new Scanner(file);

            iterations = Integer.parseInt(sc.nextLine());
            rounds = Integer.parseInt(sc.nextLine());
            key = stringToBlock(sc.nextLine());
            block = stringToBlock(sc.nextLine());

            sc.close();
        }
        catch (Exception e) {
            System.out.println("The input file is formatted incorrectly");
            return;
        }



        System.out.println("Number of iterations: " + iterations);
        System.out.println("Number of rounds: " + rounds);
        System.out.println("Key:");
        System.out.println(blockToString(key));
        System.out.println("Plaintext:");
        System.out.println(blockToString(block));




        System.out.println("******** BEGIN ENCRYPTION ********");
        long startTime = System.nanoTime();

        short[][] out = block;
        completeKey(key);
        for (int i = 0; i < iterations; i++) {
            if (i > 0) out = addRoundKey(out, block);
            out = encrypt(rounds, out, key);
        }

        long endTime = System.nanoTime();
        System.out.println("********  END ENCRYPTION  ********");




        System.out.println("Final block:");
        System.out.println(blockToString(out));
        System.out.println("\nTook " + ((endTime - startTime) / 1000000) + " milliseconds");



    }

    public static short[][] encrypt(int rounds, short[][] block, short[][] key) {

        short[][] out = block;


        out = addRoundKey(out, key);

        for (int i = 1; i <= rounds; i++){
            out = subBlock(out);
            out = shiftRows(out);
            if (i != rounds) out = mixColumns(out);
            out = addRoundKey(out, getRoundKey(i));
        }

        return out;

    }

    public static void completeKey(short[][] k){

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                keyComplete[i][j] = k[i][j];
            }
        }

        for (int n = 1; n < 11; n++){

            keyComplete[0][4*n] = (short) (keyComplete[0][4*n - 4] ^ sbox[keyComplete[1][4*n - 1]] ^ rCon[n - 1]);
            keyComplete[1][4*n] = (short) (keyComplete[1][4*n - 4] ^ sbox[keyComplete[2][4*n - 1]]);
            keyComplete[2][4*n] = (short) (keyComplete[2][4*n - 4] ^ sbox[keyComplete[3][4*n - 1]]);
            keyComplete[3][4*n] = (short) (keyComplete[3][4*n - 4] ^ sbox[keyComplete[0][4*n - 1]]);

            keyComplete[0][4*n + 1] = (short) (keyComplete[0][4*n - 3] ^ keyComplete[0][4*n]);
            keyComplete[1][4*n + 1] = (short) (keyComplete[1][4*n - 3] ^ keyComplete[1][4*n]);
            keyComplete[2][4*n + 1] = (short) (keyComplete[2][4*n - 3] ^ keyComplete[2][4*n]);
            keyComplete[3][4*n + 1] = (short) (keyComplete[3][4*n - 3] ^ keyComplete[3][4*n]);

            keyComplete[0][4*n + 2] = (short) (keyComplete[0][4*n - 2] ^ keyComplete[0][4*n + 1]);
            keyComplete[1][4*n + 2] = (short) (keyComplete[1][4*n - 2] ^ keyComplete[1][4*n + 1]);
            keyComplete[2][4*n + 2] = (short) (keyComplete[2][4*n - 2] ^ keyComplete[2][4*n + 1]);
            keyComplete[3][4*n + 2] = (short) (keyComplete[3][4*n - 2] ^ keyComplete[3][4*n + 1]);

            keyComplete[0][4*n + 3] = (short) (keyComplete[0][4*n - 1] ^ keyComplete[0][4*n + 2]);
            keyComplete[1][4*n + 3] = (short) (keyComplete[1][4*n - 1] ^ keyComplete[1][4*n + 2]);
            keyComplete[2][4*n + 3] = (short) (keyComplete[2][4*n - 1] ^ keyComplete[2][4*n + 2]);
            keyComplete[3][4*n + 3] = (short) (keyComplete[3][4*n - 1] ^ keyComplete[3][4*n + 2]);

        }

    }

    public static short[][] subBlock(short[][] b){

        short[][] out = new short[4][4];

        out[0][0] = sbox[b[0][0]];
        out[0][1] = sbox[b[0][1]];
        out[0][2] = sbox[b[0][2]];
        out[0][3] = sbox[b[0][3]];

        out[1][0] = sbox[b[1][0]];
        out[1][1] = sbox[b[1][1]];
        out[1][2] = sbox[b[1][2]];
        out[1][3] = sbox[b[1][3]];

        out[2][0] = sbox[b[2][0]];
        out[2][1] = sbox[b[2][1]];
        out[2][2] = sbox[b[2][2]];
        out[2][3] = sbox[b[2][3]];

        out[3][0] = sbox[b[3][0]];
        out[3][1] = sbox[b[3][1]];
        out[3][2] = sbox[b[3][2]];
        out[3][3] = sbox[b[3][3]];

        return out;

    }

    public static short[][] shiftRows(short[][] b) {

        short[][] out = new short[4][4];

        out[0][0] = b[0][0];
        out[0][1] = b[0][1];
        out[0][2] = b[0][2];
        out[0][3] = b[0][3];

        out[1][0] = b[1][1];
        out[1][1] = b[1][2];
        out[1][2] = b[1][3];
        out[1][3] = b[1][0];

        out[2][0] = b[2][2];
        out[2][1] = b[2][3];
        out[2][2] = b[2][0];
        out[2][3] = b[2][1];

        out[3][0] = b[3][3];
        out[3][1] = b[3][0];
        out[3][2] = b[3][1];
        out[3][3] = b[3][2];

        return out;

    }

    public static short[][] mixColumns(short[][] b) {

        short[][] out = new short[4][4];

        out[0][0] = (short) (mult[b[0][0]][0] ^ mult[b[1][0]][1] ^ b[2][0] ^ b[3][0]);
        out[1][0] = (short) (b[0][0] ^ mult[b[1][0]][0] ^ mult[b[2][0]][1] ^ b[3][0]);
        out[2][0] = (short) (b[0][0] ^ b[1][0] ^ mult[b[2][0]][0] ^ mult[b[3][0]][1]);
        out[3][0] = (short) (mult[b[0][0]][1] ^ b[1][0] ^ b[2][0] ^ mult[b[3][0]][0]);

        out[0][1] = (short) (mult[b[0][1]][0] ^ mult[b[1][1]][1] ^ b[2][1] ^ b[3][1]);
        out[1][1] = (short) (b[0][1] ^ mult[b[1][1]][0] ^ mult[b[2][1]][1] ^ b[3][1]);
        out[2][1] = (short) (b[0][1] ^ b[1][1] ^ mult[b[2][1]][0] ^ mult[b[3][1]][1]);
        out[3][1] = (short) (mult[b[0][1]][1] ^ b[1][1] ^ b[2][1] ^ mult[b[3][1]][0]);

        out[0][2] = (short) (mult[b[0][2]][0] ^ mult[b[1][2]][1] ^ b[2][2] ^ b[3][2]);
        out[1][2] = (short) (b[0][2] ^ mult[b[1][2]][0] ^ mult[b[2][2]][1] ^ b[3][2]);
        out[2][2] = (short) (b[0][2] ^ b[1][2] ^ mult[b[2][2]][0] ^ mult[b[3][2]][1]);
        out[3][2] = (short) (mult[b[0][2]][1] ^ b[1][2] ^ b[2][2] ^ mult[b[3][2]][0]);

        out[0][3] = (short) (mult[b[0][3]][0] ^ mult[b[1][3]][1] ^ b[2][3] ^ b[3][3]);
        out[1][3] = (short) (b[0][3] ^ mult[b[1][3]][0] ^ mult[b[2][3]][1] ^ b[3][3]);
        out[2][3] = (short) (b[0][3] ^ b[1][3] ^ mult[b[2][3]][0] ^ mult[b[3][3]][1]);
        out[3][3] = (short) (mult[b[0][3]][1] ^ b[1][3] ^ b[2][3] ^ mult[b[3][3]][0]);

        return out;

    }

    public static short[][] addRoundKey(short[][] b, short[][] k) {

        short[][] out = new short[4][4];

        out[0][0] = (short) (b[0][0] ^ k[0][0]);
        out[1][0] = (short) (b[1][0] ^ k[1][0]);
        out[2][0] = (short) (b[2][0] ^ k[2][0]);
        out[3][0] = (short) (b[3][0] ^ k[3][0]);

        out[0][1] = (short) (b[0][1] ^ k[0][1]);
        out[1][1] = (short) (b[1][1] ^ k[1][1]);
        out[2][1] = (short) (b[2][1] ^ k[2][1]);
        out[3][1] = (short) (b[3][1] ^ k[3][1]);

        out[0][2] = (short) (b[0][2] ^ k[0][2]);
        out[1][2] = (short) (b[1][2] ^ k[1][2]);
        out[2][2] = (short) (b[2][2] ^ k[2][2]);
        out[3][2] = (short) (b[3][2] ^ k[3][2]);

        out[0][3] = (short) (b[0][3] ^ k[0][3]);
        out[1][3] = (short) (b[1][3] ^ k[1][3]);
        out[2][3] = (short) (b[2][3] ^ k[2][3]);
        out[3][3] = (short) (b[3][3] ^ k[3][3]);

        return out;

    }

    public static short[][] getRoundKey(int r) {

        short[][] out = new short[4][4];

        out[0][0] = keyComplete[0][4*r];
        out[1][0] = keyComplete[1][4*r];
        out[2][0] = keyComplete[2][4*r];
        out[3][0] = keyComplete[3][4*r];

        out[0][1] = keyComplete[0][4*r + 1];
        out[1][1] = keyComplete[1][4*r + 1];
        out[2][1] = keyComplete[2][4*r + 1];
        out[3][1] = keyComplete[3][4*r + 1];

        out[0][2] = keyComplete[0][4*r + 2];
        out[1][2] = keyComplete[1][4*r + 2];
        out[2][2] = keyComplete[2][4*r + 2];
        out[3][2] = keyComplete[3][4*r + 2];

        out[0][3] = keyComplete[0][4*r + 3];
        out[1][3] = keyComplete[1][4*r + 3];
        out[2][3] = keyComplete[2][4*r + 3];
        out[3][3] = keyComplete[3][4*r + 3];

        return out;

    }

    public static short[][] stringToBlock(String s) {

        short[][] out = new short[4][4];

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                int index = 8*i + 2*j;
                out[j][i] = Short.parseShort(s.substring(index, index + 2),16);
            }
        }

        return out;

    }

    public static String blockToString(short[][] b) {

        StringBuilder builder = new StringBuilder();

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                builder.append(shortToString(b[j][i]));
            }
        }

        return builder.toString();

    }

    public static String shortToString(short sh) {
        if (sh < 16) {
            return "0" + String.valueOf(Integer.toHexString(sh));
        }

        return String.valueOf(Integer.toHexString(sh));
    }

    public static void printBlock(short[][] b) {

        for (int i = 0; i < b.length; i++) {
            for (int j = 0; j < b[0].length; j++) {
                System.out.print(Integer.toHexString(b[i][j]));
                System.out.print(", ");
            }
            System.out.print("\n");
        }
        System.out.print("\n");

    }

}
